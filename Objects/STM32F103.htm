<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\STM32F103.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\STM32F103.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Jan 03 21:50:30 2019
<BR><P>
<H3>Maximum Stack Usage =        832 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
AppFuncCmd_GetWidgetListValue &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">AppFuncCmd_GetWidgetGroupCount</a> from psdk_app_func.o(i.AppFuncCmd_GetWidgetGroupCount) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[42]">AppFuncCmd_GetWidgetGroupValue</a> from psdk_app_func.o(i.AppFuncCmd_GetWidgetGroupValue) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[3f]">AppFuncCmd_GetWidgetListLength</a> from psdk_app_func.o(i.AppFuncCmd_GetWidgetListLength) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[40]">AppFuncCmd_GetWidgetListValue</a> from psdk_app_func.o(i.AppFuncCmd_GetWidgetListValue) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[43]">AppFuncCmd_SetWidgetValue</a> from psdk_app_func.o(i.AppFuncCmd_SetWidgetValue) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[3e]">AppFuncCmd_TT_AppToLoad</a> from psdk_app_func.o(i.AppFuncCmd_TT_AppToLoad) referenced from psdk_app_func.o(.constdata)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[50]">GimbalCmd_ControlSpeed</a> from psdk_payload_gimbal.o(i.GimbalCmd_ControlSpeed) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[4d]">GimbalCmd_GetGimbalState</a> from psdk_payload_gimbal.o(i.GimbalCmd_GetGimbalState) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[4f]">GimbalCmd_ReturnHead</a> from psdk_payload_gimbal.o(i.GimbalCmd_ReturnHead) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[4e]">GimbalCmd_SetGimbalMode</a> from psdk_payload_gimbal.o(i.GimbalCmd_SetGimbalMode) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[51]">GimbalCmd_StartCalibration</a> from psdk_payload_gimbal.o(i.GimbalCmd_StartCalibration) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[52]">GimbalCmd_SupportState</a> from psdk_payload_gimbal.o(i.GimbalCmd_SupportState) referenced from psdk_payload_gimbal.o(.constdata)
 <LI><a href="#[65]">GimbalEmu_ControlSpeed</a> from test_payload_gimbal_emu.o(i.GimbalEmu_ControlSpeed) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[62]">GimbalEmu_GetGimbalParam</a> from test_payload_gimbal_emu.o(i.GimbalEmu_GetGimbalParam) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[64]">GimbalEmu_ReturnHead</a> from test_payload_gimbal_emu.o(i.GimbalEmu_ReturnHead) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[63]">GimbalEmu_SetGimbalMode</a> from test_payload_gimbal_emu.o(i.GimbalEmu_SetGimbalMode) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[66]">GimbalEmu_StartCalibration</a> from test_payload_gimbal_emu.o(i.GimbalEmu_StartCalibration) referenced from test_payload_gimbal_emu.o(.constdata)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4b]">MsgPushCmd_GpsRawData</a> from psdk_msg_subcribe.o(i.MsgPushCmd_GpsRawData) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[49]">MsgPushCmd_PushAppDateTime</a> from psdk_msg_subcribe.o(i.MsgPushCmd_PushAppDateTime) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[45]">MsgPushCmd_PushAttitude</a> from psdk_msg_subcribe.o(i.MsgPushCmd_PushAttitude) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[44]">MsgPushCmd_PushBandWidth</a> from psdk_msg_subcribe.o(i.MsgPushCmd_PushBandWidth) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[4a]">MsgPushCmd_PushBaroHeight</a> from psdk_msg_subcribe.o(i.MsgPushCmd_PushBaroHeight) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[46]">MsgPushCmd_PushBatteryInfo</a> from psdk_msg_subcribe.o(i.MsgPushCmd_PushBatteryInfo) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[47]">MsgPushCmd_PushGpsInfo</a> from psdk_msg_subcribe.o(i.MsgPushCmd_PushGpsInfo) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[48]">MsgPushCmd_PushUavState</a> from psdk_msg_subcribe.o(i.MsgPushCmd_PushUavState) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[4c]">MsgPushCmd_RtkRawData</a> from psdk_msg_subcribe.o(i.MsgPushCmd_RtkRawData) referenced from psdk_msg_subcribe.o(.constdata)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[58]">PsdkPayloadStateCmd_GetPayloadProductAlias</a> from psdk_upper.o(i.PsdkPayloadStateCmd_GetPayloadProductAlias) referenced from psdk_upper.o(.constdata)
 <LI><a href="#[56]">PsdkPayloadStateCmd_GetPayloadProductInfo</a> from psdk_upper.o(i.PsdkPayloadStateCmd_GetPayloadProductInfo) referenced from psdk_upper.o(.constdata)
 <LI><a href="#[57]">PsdkPayloadStateCmd_GetSkyportVersionInfo</a> from psdk_upper.o(i.PsdkPayloadStateCmd_GetSkyportVersionInfo) referenced from psdk_upper.o(.constdata)
 <LI><a href="#[54]">PsdkPayloadStateCmd_GetVersion</a> from psdk_upper.o(i.PsdkPayloadStateCmd_GetVersion) referenced from psdk_upper.o(.constdata)
 <LI><a href="#[53]">PsdkPayloadStateCmd_IdentityVerify</a> from psdk_upper.o(i.PsdkPayloadStateCmd_IdentityVerify) referenced from psdk_upper.o(.constdata)
 <LI><a href="#[55]">PsdkPayloadStateCmd_LinkHandShake</a> from psdk_upper.o(i.PsdkPayloadStateCmd_LinkHandShake) referenced from psdk_upper.o(.constdata)
 <LI><a href="#[3a]">Psdk_Write</a> from application.o(i.Psdk_Write) referenced from application.o(i.application_init)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from motordriver.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">Test_GetWidgetValueFunc</a> from test_app_func.o(i.Test_GetWidgetValueFunc) referenced from application.o(i.application_init)
 <LI><a href="#[3b]">Test_ReceiveFromMobileSDKFunc</a> from test_app_func.o(i.Test_ReceiveFromMobileSDKFunc) referenced from application.o(i.application_init)
 <LI><a href="#[3d]">Test_SetWidgetValueFunc</a> from test_app_func.o(i.Test_SetWidgetValueFunc) referenced from application.o(i.application_init)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from uart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from uart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from uart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[39]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[38]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[5e]">appDateTimeMsgCallback</a> from test_msg_push.o(i.appDateTimeMsgCallback) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[59]">bandWidthMsgCallback</a> from test_msg_push.o(i.bandWidthMsgCallback) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[5f]">baroHeightDataMsgCallback</a> from test_msg_push.o(i.baroHeightDataMsgCallback) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[5b]">batteryInfoMsgCallback</a> from test_msg_push.o(i.batteryInfoMsgCallback) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[5c]">gpsInfoMsgCallback</a> from test_msg_push.o(i.gpsInfoMsgCallback) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[60]">gpsRawDataMsgCallback</a> from test_msg_push.o(i.gpsRawDataMsgCallback) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[61]">rtkRawDataMsgCallback</a> from test_msg_push.o(i.rtkRawDataMsgCallback) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[5a]">uavAttitudeMsgCallback</a> from test_msg_push.o(i.uavAttitudeMsgCallback) referenced from test_msg_push.o(.constdata)
 <LI><a href="#[5d]">uavStateMsgCallback</a> from test_msg_push.o(i.uavStateMsgCallback) referenced from test_msg_push.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[67]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[10f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[110]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[111]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[112]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Put
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Get
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReceiveFromMobileSDKFunc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_FrameToInfoData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_PutStrToBuff
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_LinkHandShake
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_GetPayloadProductInfo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_GetPayloadProductAlias
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkMsgSub_RegMsgCallbackList
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkGimbal_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_KeySetup
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillInUserInfo
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetListValue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkMsgSub_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_final
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8d]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetListValue
</UL>

<P><STRONG><a name="[b3]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_PushMsgToFloatingWindow
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkBigLEDTest
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_PutStrToBuff
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_IdentityVerify
</UL>

<P><STRONG><a name="[98]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillInUserInfo
</UL>

<P><STRONG><a name="[97]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillInUserInfo
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_GetGimbalParam
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_GetGimbalParam
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_GetGimbalParam
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_GetGimbalParam
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkBigLEDTest
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[118]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[119]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11a]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[11c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[68]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[11d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>ADC1_GPIO_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc.o(i.ADC1_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC1_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCinit
</UL>

<P><STRONG><a name="[86]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[8a]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[9c]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[9b]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[88]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[84]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[85]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[87]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[9a]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[89]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[81]"></a>ADCinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adc.o(i.ADCinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADCinit &rArr; Adc1_Init &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>Adc1_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, adc.o(i.Adc1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Adc1_Init &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCinit
</UL>

<P><STRONG><a name="[8e]"></a>CommunicateUSART_Config</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, communicate.o(i.CommunicateUSART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CommunicateUSART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>CommunicateUsart_SendString</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, communicate.o(i.CommunicateUsart_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CommunicateUsart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDriverGPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicateUSART_Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicateUSART_Config
</UL>

<P><STRONG><a name="[10b]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnONLED
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOFFLED
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>Get_Adc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc.o(i.Get_Adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Adc
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>GimbalEmu_ControlSpeed</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, test_payload_gimbal_emu.o(i.GimbalEmu_ControlSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GimbalEmu_ControlSpeed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>GimbalEmu_GetGimbalParam</STRONG> (Thumb, 556 bytes, Stack size 48 bytes, test_payload_gimbal_emu.o(i.GimbalEmu_GetGimbalParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GimbalEmu_GetGimbalParam &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>GimbalEmu_ReturnHead</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, test_payload_gimbal_emu.o(i.GimbalEmu_ReturnHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GimbalEmu_ReturnHead &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>GimbalEmu_SetGimbalMode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, test_payload_gimbal_emu.o(i.GimbalEmu_SetGimbalMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GimbalEmu_SetGimbalMode &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>GimbalEmu_StartCalibration</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, test_payload_gimbal_emu.o(i.GimbalEmu_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GimbalEmu_StartCalibration &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_payload_gimbal_emu.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>LED_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led_button_switch.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[9e]"></a>LOG_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, log_printf.o(i.LOG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LOG_Init &rArr; UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[a0]"></a>MotorDriverGPIO_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, motordriver.o(i.MotorDriverGPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MotorDriverGPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[a1]"></a>PsdkAes_Decrypt</STRONG> (Thumb, 112 bytes, Stack size 272 bytes, psdk_aes.o(i.PsdkAes_Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = PsdkAes_Decrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupDecrypt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_KeySetup
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_FrameToInfoData
</UL>

<P><STRONG><a name="[a5]"></a>PsdkAes_Encrypt</STRONG> (Thumb, 112 bytes, Stack size 272 bytes, psdk_aes.o(i.PsdkAes_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupEncrypt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_KeySetup
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
</UL>

<P><STRONG><a name="[a4]"></a>PsdkAes_SetupDecrypt</STRONG> (Thumb, 634 bytes, Stack size 40 bytes, psdk_aes.o(i.PsdkAes_SetupDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PsdkAes_SetupDecrypt &rArr; PsdkAes_InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_InvSubBytes
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_InvShiftRows
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_InvMixColumns
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Decrypt
</UL>

<P><STRONG><a name="[b0]"></a>PsdkAppFunc_Init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, psdk_app_func.o(i.PsdkAppFunc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PsdkAppFunc_Init &rArr; PsdkProto_RegCmdSetHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegCmdSetHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[b2]"></a>PsdkAppFunc_PushMsgToFloatingWindow</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, psdk_app_func.o(i.PsdkAppFunc_PushMsgToFloatingWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = PsdkAppFunc_PushMsgToFloatingWindow &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Send
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProt_GetCurrentSendSeq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkBigLEDTest
</UL>

<P><STRONG><a name="[109]"></a>PsdkAppFunc_RegGetWidgetValueCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psdk_app_func.o(i.PsdkAppFunc_RegGetWidgetValueCallback))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[10a]"></a>PsdkAppFunc_RegSetWidgetValueCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psdk_app_func.o(i.PsdkAppFunc_RegSetWidgetValueCallback))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[107]"></a>PsdkAppFunc_SetReceiveFromAppCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psdk_app_func.o(i.PsdkAppFunc_SetReceiveFromAppCallback))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[108]"></a>PsdkAppFunc_SetWidgetList</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, psdk_app_func.o(i.PsdkAppFunc_SetWidgetList))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[b6]"></a>PsdkAppFunc_TransferToApp</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, psdk_app_func.o(i.PsdkAppFunc_TransferToApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PsdkAppFunc_TransferToApp &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Send
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProt_GetCurrentSendSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkBigLEDTest
</UL>

<P><STRONG><a name="[b7]"></a>PsdkBigLEDTest</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, application.o(i.PsdkBigLEDTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PsdkBigLEDTest &rArr; PsdkAppFunc_TransferToApp &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_TransferToApp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_PushMsgToFloatingWindow
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>PsdkCrc_Crc16</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, psdk_crc.o(i.PsdkCrc_Crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PsdkCrc_Crc16 &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtParse_AddByte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
</UL>

<P><STRONG><a name="[bb]"></a>PsdkCrc_Crc32</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, psdk_crc.o(i.PsdkCrc_Crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PsdkCrc_Crc32 &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtParse_AddByte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
</UL>

<P><STRONG><a name="[a2]"></a>PsdkDebug_AssertFailed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, psdk_debug.o(i.PsdkDebug_AssertFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc32
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc16
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Encrypt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Decrypt
</UL>

<P><STRONG><a name="[bc]"></a>PsdkGimbal_Init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, psdk_payload_gimbal.o(i.PsdkGimbal_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PsdkGimbal_Init &rArr; PsdkProto_RegCmdSetHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegCmdSetHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[bd]"></a>PsdkMsgSub_Init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, psdk_msg_subcribe.o(i.PsdkMsgSub_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PsdkMsgSub_Init &rArr; PsdkProto_RegCmdSetHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegCmdSetHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[bf]"></a>PsdkMsgSub_RegMsgCallbackList</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, psdk_msg_subcribe.o(i.PsdkMsgSub_RegMsgCallbackList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PsdkMsgSub_RegMsgCallbackList
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[c5]"></a>PsdkProcessRec</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, application.o(i.PsdkProcessRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = PsdkProcessRec &rArr; PsdkUpper_ProcessReceiveData &rArr; PsdkProto_ProcessReceiveData &rArr; PsdkProto_DealFrame &rArr; PsdkProto_DealCmd &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_ProcessReceiveData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Psdk_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>PsdkProtParse_AddByte</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, psdk_proto_parse.o(i.PsdkProtParse_AddByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PsdkProtParse_AddByte &rArr; PsdkCrc_Crc32 &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtParse_ErrorProcess
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc32
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_ProcessReceiveData
</UL>

<P><STRONG><a name="[d2]"></a>PsdkProtParse_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, psdk_proto_parse.o(i.PsdkProtParse_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
</UL>

<P><STRONG><a name="[b4]"></a>PsdkProt_GetCurrentSendSeq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, psdk_proto.o(i.PsdkProt_GetCurrentSendSeq))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_TransferToApp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_PushMsgToFloatingWindow
</UL>

<P><STRONG><a name="[cd]"></a>PsdkProto_DealCmd</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, psdk_proto.o(i.PsdkProto_DealCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = PsdkProto_DealCmd &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealFrame
</UL>

<P><STRONG><a name="[d1]"></a>PsdkProto_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, psdk_proto.o(i.PsdkProto_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PsdkProto_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtParse_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_Init
</UL>

<P><STRONG><a name="[d3]"></a>PsdkProto_ProcessReceiveData</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, psdk_proto.o(i.PsdkProto_ProcessReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = PsdkProto_ProcessReceiveData &rArr; PsdkProto_DealFrame &rArr; PsdkProto_DealCmd &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtParse_AddByte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_ProcessReceiveData
</UL>

<P><STRONG><a name="[b1]"></a>PsdkProto_RegCmdSetHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, psdk_proto.o(i.PsdkProto_RegCmdSetHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PsdkProto_RegCmdSetHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkMsgSub_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkGimbal_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_Init
</UL>

<P><STRONG><a name="[d6]"></a>PsdkProto_RegSendDataFunc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, psdk_proto.o(i.PsdkProto_RegSendDataFunc))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_RegSendFunction
</UL>

<P><STRONG><a name="[b5]"></a>PsdkProto_Send</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, psdk_proto.o(i.PsdkProto_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_TransferToApp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_PushMsgToFloatingWindow
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>

<P><STRONG><a name="[8b]"></a>PsdkProto_SendAckData</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, psdk_proto.o(i.PsdkProto_SendAckData))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgPushCmd_PushBatteryInfo
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_SetWidgetValue
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetListValue
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetListLength
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetGroupValue
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetGroupCount
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealCmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_LinkHandShake
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_IdentityVerify
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_GetVersion
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_GetSkyportVersionInfo
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_GetPayloadProductInfo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_GetPayloadProductAlias
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_SupportState
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_StartCalibration
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_SetGimbalMode
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_ReturnHead
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_GetGimbalState
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalCmd_ControlSpeed
</UL>

<P><STRONG><a name="[d4]"></a>PsdkUpper_Init</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, psdk_upper.o(i.PsdkUpper_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = PsdkUpper_Init &rArr; PsdkProtoUpper_CalTransferKey &rArr; md5_update &rArr; md5_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegCmdSetHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[c7]"></a>PsdkUpper_ProcessReceiveData</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, psdk_upper.o(i.PsdkUpper_ProcessReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = PsdkUpper_ProcessReceiveData &rArr; PsdkProto_ProcessReceiveData &rArr; PsdkProto_DealFrame &rArr; PsdkProto_DealCmd &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_ProcessReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProcessRec
</UL>

<P><STRONG><a name="[d5]"></a>PsdkUpper_RegSendFunction</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, psdk_upper.o(i.PsdkUpper_RegSendFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PsdkUpper_RegSendFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_RegSendDataFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[c6]"></a>Psdk_Read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, application.o(i.Psdk_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Psdk_Read &rArr; UART_Read &rArr; RingBuf_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProcessRec
</UL>

<P><STRONG><a name="[3a]"></a>Psdk_Write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, application.o(i.Psdk_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Psdk_Write &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.application_init)
</UL>
<P><STRONG><a name="[83]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[f0]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[f7]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[7f]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDriverGPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicateUSART_Config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config
</UL>

<P><STRONG><a name="[f6]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[d9]"></a>RCC_Configuration</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_Configuration &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[fd]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[e3]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[dd]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[db]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[de]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[df]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[e1]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[e0]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[e2]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[e4]"></a>RingBuf_Get</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, dji_ringbuffer.o(i.RingBuf_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RingBuf_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Read
</UL>

<P><STRONG><a name="[e5]"></a>RingBuf_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dji_ringbuffer.o(i.RingBuf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBuf_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_CutBufSizeToPowOfTwo
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[e7]"></a>RingBuf_Put</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, dji_ringbuffer.o(i.RingBuf_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, motordriver.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnONLED
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOFFLED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>TIM4_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, motordriver.o(i.TIM4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM4_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[eb]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[ef]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[ea]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[f1]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[3c]"></a>Test_GetWidgetValueFunc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, test_app_func.o(i.Test_GetWidgetValueFunc))
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.application_init)
</UL>
<P><STRONG><a name="[3b]"></a>Test_ReceiveFromMobileSDKFunc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, test_app_func.o(i.Test_ReceiveFromMobileSDKFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Test_ReceiveFromMobileSDKFunc &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.application_init)
</UL>
<P><STRONG><a name="[3d]"></a>Test_SetWidgetValueFunc</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, test_app_func.o(i.Test_SetWidgetValueFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Test_SetWidgetValueFunc &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.application_init)
</UL>
<P><STRONG><a name="[ed]"></a>TurnOFFLED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motordriver.o(i.TurnOFFLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TurnOFFLED
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>TurnONLED</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motordriver.o(i.TurnONLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TurnONLED
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>UART_Init</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[8c]"></a>UART_Printf</STRONG> (Thumb, 62 bytes, Stack size 160 bytes, log_printf.o(i.UART_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_SetWidgetValueFunc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ReceiveFromMobileSDKFunc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillInUserInfo
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_SetWidgetValue
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFuncCmd_GetWidgetGroupValue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_ProcessReceiveData
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkDebug_AssertFailed
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_StartCalibration
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_SetGimbalMode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_ReturnHead
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalEmu_ControlSpeed
</UL>

<P><STRONG><a name="[d7]"></a>UART_Read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uart.o(i.UART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Read &rArr; RingBuf_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Psdk_Read
</UL>

<P><STRONG><a name="[d8]"></a>UART_Write</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, uart.o(i.UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Psdk_Write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Put
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Put
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, uart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Put
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicateUSART_Config
</UL>

<P><STRONG><a name="[95]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicateUsart_SendString
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[fa]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicateUSART_Config
</UL>

<P><STRONG><a name="[90]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicateUSART_Config
</UL>

<P><STRONG><a name="[fb]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[94]"></a>Usart_SendByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, communicate.o(i.Usart_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicateUsart_SendString
</UL>

<P><STRONG><a name="[fe]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[120]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[b9]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkBigLEDTest
</UL>

<P><STRONG><a name="[121]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[122]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[100]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[123]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[124]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[125]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[f9]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>

<P><STRONG><a name="[126]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[127]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[128]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[106]"></a>application_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, application.o(i.application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = application_init &rArr; PsdkUpper_Init &rArr; PsdkProtoUpper_CalTransferKey &rArr; md5_update &rArr; md5_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_RegSendFunction
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkMsgSub_RegMsgCallbackList
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkMsgSub_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkGimbal_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_SetWidgetList
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_SetReceiveFromAppCallback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_RegSetWidgetValueCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_RegGetWidgetValueCallback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAppFunc_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillInUserInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = main &rArr; PsdkProcessRec &rArr; PsdkUpper_ProcessReceiveData &rArr; PsdkProto_ProcessReceiveData &rArr; PsdkProto_DealFrame &rArr; PsdkProto_DealCmd &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProcessRec
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkBigLEDTest
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDriverGPIO_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicateUsart_SendString
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicateUSART_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCinit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[cb]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_InfoDataToFrame
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
</UL>

<P><STRONG><a name="[c4]"></a>md5_final</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, psdk_md5.o(i.md5_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = md5_final &rArr; md5_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_transform
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_IdentityVerify
</UL>

<P><STRONG><a name="[c2]"></a>md5_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, psdk_md5.o(i.md5_init))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_IdentityVerify
</UL>

<P><STRONG><a name="[10c]"></a>md5_transform</STRONG> (Thumb, 2434 bytes, Stack size 88 bytes, psdk_md5.o(i.md5_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = md5_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_final
</UL>

<P><STRONG><a name="[c3]"></a>md5_update</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, psdk_md5.o(i.md5_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = md5_update &rArr; md5_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtoUpper_CalTransferKey
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_IdentityVerify
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[96]"></a>FillInUserInfo</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, application.o(i.FillInUserInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = FillInUserInfo &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[e6]"></a>RingBuf_CutBufSizeToPowOfTwo</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dji_ringbuffer.o(i.RingBuf_CutBufSizeToPowOfTwo))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Init
</UL>

<P><STRONG><a name="[a9]"></a>PsdkAes_AddRoundKey</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, psdk_aes.o(i.PsdkAes_AddRoundKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PsdkAes_AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupDecrypt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupEncrypt
</UL>

<P><STRONG><a name="[ac]"></a>PsdkAes_InvMixColumns</STRONG> (Thumb, 1356 bytes, Stack size 8 bytes, psdk_aes.o(i.PsdkAes_InvMixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PsdkAes_InvMixColumns
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupDecrypt
</UL>

<P><STRONG><a name="[aa]"></a>PsdkAes_InvShiftRows</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, psdk_aes.o(i.PsdkAes_InvShiftRows))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupDecrypt
</UL>

<P><STRONG><a name="[ab]"></a>PsdkAes_InvSubBytes</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, psdk_aes.o(i.PsdkAes_InvSubBytes))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupDecrypt
</UL>

<P><STRONG><a name="[a3]"></a>PsdkAes_KeySetup</STRONG> (Thumb, 230 bytes, Stack size 96 bytes, psdk_aes.o(i.PsdkAes_KeySetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PsdkAes_KeySetup
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SubWord
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Encrypt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Decrypt
</UL>

<P><STRONG><a name="[af]"></a>PsdkAes_MixColumns</STRONG> (Thumb, 982 bytes, Stack size 8 bytes, psdk_aes.o(i.PsdkAes_MixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PsdkAes_MixColumns
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupEncrypt
</UL>

<P><STRONG><a name="[a6]"></a>PsdkAes_SetupEncrypt</STRONG> (Thumb, 658 bytes, Stack size 40 bytes, psdk_aes.o(i.PsdkAes_SetupEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PsdkAes_SetupEncrypt &rArr; PsdkAes_MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SubBytes
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_ShiftRows
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_MixColumns
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Encrypt
</UL>

<P><STRONG><a name="[ae]"></a>PsdkAes_ShiftRows</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, psdk_aes.o(i.PsdkAes_ShiftRows))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupEncrypt
</UL>

<P><STRONG><a name="[ad]"></a>PsdkAes_SubBytes</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, psdk_aes.o(i.PsdkAes_SubBytes))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_SetupEncrypt
</UL>

<P><STRONG><a name="[a8]"></a>PsdkAes_SubWord</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, psdk_aes.o(i.PsdkAes_SubWord))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_KeySetup
</UL>

<P><STRONG><a name="[ce]"></a>PsdkProto_DealFrame</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, psdk_proto.o(i.PsdkProto_DealFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = PsdkProto_DealFrame &rArr; PsdkProto_DealCmd &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_FrameToInfoData
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_ProcessReceiveData
</UL>

<P><STRONG><a name="[cf]"></a>PsdkProto_FrameToInfoData</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, psdk_proto.o(i.PsdkProto_FrameToInfoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PsdkProto_FrameToInfoData &rArr; PsdkAes_Decrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Decrypt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_DealFrame
</UL>

<P><STRONG><a name="[d0]"></a>PsdkProto_InfoDataToFrame</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, psdk_proto.o(i.PsdkProto_InfoDataToFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc32
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkCrc_Crc16
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkAes_Encrypt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_Send
</UL>

<P><STRONG><a name="[c9]"></a>PsdkProtParse_ErrorProcess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, psdk_proto_parse.o(i.PsdkProtParse_ErrorProcess))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProtParse_AddByte
</UL>

<P><STRONG><a name="[41]"></a>AppFuncCmd_GetWidgetGroupCount</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, psdk_app_func.o(i.AppFuncCmd_GetWidgetGroupCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = AppFuncCmd_GetWidgetGroupCount &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>AppFuncCmd_GetWidgetGroupValue</STRONG> (Thumb, 600 bytes, Stack size 136 bytes, psdk_app_func.o(i.AppFuncCmd_GetWidgetGroupValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = AppFuncCmd_GetWidgetGroupValue &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>AppFuncCmd_GetWidgetListLength</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, psdk_app_func.o(i.AppFuncCmd_GetWidgetListLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = AppFuncCmd_GetWidgetListLength &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>AppFuncCmd_GetWidgetListValue</STRONG> (Thumb, 306 bytes, Stack size 232 bytes, psdk_app_func.o(i.AppFuncCmd_GetWidgetListValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = AppFuncCmd_GetWidgetListValue &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>AppFuncCmd_SetWidgetValue</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, psdk_app_func.o(i.AppFuncCmd_SetWidgetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = AppFuncCmd_SetWidgetValue &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>AppFuncCmd_TT_AppToLoad</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, psdk_app_func.o(i.AppFuncCmd_TT_AppToLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AppFuncCmd_TT_AppToLoad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_app_func.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>MsgPushCmd_GpsRawData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psdk_msg_subcribe.o(i.MsgPushCmd_GpsRawData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MsgPushCmd_GpsRawData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>MsgPushCmd_PushAppDateTime</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psdk_msg_subcribe.o(i.MsgPushCmd_PushAppDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MsgPushCmd_PushAppDateTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>MsgPushCmd_PushAttitude</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psdk_msg_subcribe.o(i.MsgPushCmd_PushAttitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MsgPushCmd_PushAttitude
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>MsgPushCmd_PushBandWidth</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psdk_msg_subcribe.o(i.MsgPushCmd_PushBandWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MsgPushCmd_PushBandWidth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>MsgPushCmd_PushBaroHeight</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psdk_msg_subcribe.o(i.MsgPushCmd_PushBaroHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MsgPushCmd_PushBaroHeight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>MsgPushCmd_PushBatteryInfo</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, psdk_msg_subcribe.o(i.MsgPushCmd_PushBatteryInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = MsgPushCmd_PushBatteryInfo &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>MsgPushCmd_PushGpsInfo</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psdk_msg_subcribe.o(i.MsgPushCmd_PushGpsInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MsgPushCmd_PushGpsInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>MsgPushCmd_PushUavState</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psdk_msg_subcribe.o(i.MsgPushCmd_PushUavState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MsgPushCmd_PushUavState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>MsgPushCmd_RtkRawData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psdk_msg_subcribe.o(i.MsgPushCmd_RtkRawData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MsgPushCmd_RtkRawData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_msg_subcribe.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>GimbalCmd_ControlSpeed</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, psdk_payload_gimbal.o(i.GimbalCmd_ControlSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = GimbalCmd_ControlSpeed &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>GimbalCmd_GetGimbalState</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, psdk_payload_gimbal.o(i.GimbalCmd_GetGimbalState))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = GimbalCmd_GetGimbalState &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>GimbalCmd_ReturnHead</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, psdk_payload_gimbal.o(i.GimbalCmd_ReturnHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = GimbalCmd_ReturnHead &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>GimbalCmd_SetGimbalMode</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, psdk_payload_gimbal.o(i.GimbalCmd_SetGimbalMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = GimbalCmd_SetGimbalMode &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>GimbalCmd_StartCalibration</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, psdk_payload_gimbal.o(i.GimbalCmd_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = GimbalCmd_StartCalibration &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>GimbalCmd_SupportState</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, psdk_payload_gimbal.o(i.GimbalCmd_SupportState))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = GimbalCmd_SupportState &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_payload_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>PsdkPayloadStateCmd_GetPayloadProductAlias</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, psdk_upper.o(i.PsdkPayloadStateCmd_GetPayloadProductAlias))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PsdkPayloadStateCmd_GetPayloadProductAlias &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_upper.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>PsdkPayloadStateCmd_GetPayloadProductInfo</STRONG> (Thumb, 74 bytes, Stack size 136 bytes, psdk_upper.o(i.PsdkPayloadStateCmd_GetPayloadProductInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = PsdkPayloadStateCmd_GetPayloadProductInfo &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_upper.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>PsdkPayloadStateCmd_GetSkyportVersionInfo</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, psdk_upper.o(i.PsdkPayloadStateCmd_GetSkyportVersionInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = PsdkPayloadStateCmd_GetSkyportVersionInfo &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_upper.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>PsdkPayloadStateCmd_GetVersion</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, psdk_upper.o(i.PsdkPayloadStateCmd_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = PsdkPayloadStateCmd_GetVersion &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_upper.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>PsdkPayloadStateCmd_IdentityVerify</STRONG> (Thumb, 124 bytes, Stack size 200 bytes, psdk_upper.o(i.PsdkPayloadStateCmd_IdentityVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = PsdkPayloadStateCmd_IdentityVerify &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_final
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_PutStrToBuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_upper.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>PsdkPayloadStateCmd_LinkHandShake</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, psdk_upper.o(i.PsdkPayloadStateCmd_LinkHandShake))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PsdkPayloadStateCmd_LinkHandShake &rArr; PsdkProto_SendAckData &rArr; PsdkProto_Send &rArr; PsdkProto_InfoDataToFrame &rArr; PsdkAes_Encrypt &rArr; PsdkDebug_AssertFailed &rArr; UART_Printf &rArr; UART_Write &rArr; RingBuf_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkProto_SendAckData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psdk_upper.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>PsdkProtoUpper_CalTransferKey</STRONG> (Thumb, 234 bytes, Stack size 128 bytes, psdk_upper.o(i.PsdkProtoUpper_CalTransferKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = PsdkProtoUpper_CalTransferKey &rArr; md5_update &rArr; md5_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_final
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkUpper_Init
</UL>

<P><STRONG><a name="[c1]"></a>Str_PutStrToBuff</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, psdk_upper.o(i.Str_PutStrToBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Str_PutStrToBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsdkPayloadStateCmd_IdentityVerify
</UL>

<P><STRONG><a name="[5e]"></a>appDateTimeMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(i.appDateTimeMsgCallback))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>bandWidthMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(i.bandWidthMsgCallback))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>baroHeightDataMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(i.baroHeightDataMsgCallback))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>batteryInfoMsgCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, test_msg_push.o(i.batteryInfoMsgCallback))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>gpsInfoMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(i.gpsInfoMsgCallback))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>gpsRawDataMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(i.gpsRawDataMsgCallback))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>rtkRawDataMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(i.rtkRawDataMsgCallback))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>uavAttitudeMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(i.uavAttitudeMsgCallback))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>uavStateMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_msg_push.o(i.uavStateMsgCallback))
<BR>[Address Reference Count : 1]<UL><LI> test_msg_push.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e9]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[101]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ff]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[104]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[103]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[39]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[38]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
